import torch
import torch.nn as nn
import torch.nn.functional as F
from torchsummary import summary
import torch.nn.init as init
from encoders.ResNet import Bottleneck, FusionBlock


class CentralResNet(nn.Module):
    def __init__(
        self,
        ResBlock,
        layer_list,
        num_classes,
        channels_rgb=3,
        channels_nir=22,
        alpha1=1,
        alpha2=1,
        dropout_prob=0,
    ):
        super(CentralResNet, self).__init__()
        self.in_channels = [64, 64]
        self.alpha1 = alpha1
        self.alpha2 = alpha2

        self.conv1_1 = nn.Conv2d(
            channels_rgb, 64, kernel_size=7, stride=2, padding=3, bias=False
        )
        self.conv1_2 = nn.Conv2d(
            channels_nir, 64, kernel_size=7, stride=2, padding=3, bias=False
        )
        self.batch_norm1 = nn.BatchNorm2d(64)
        self.relu = nn.ReLU()
        self.max_pool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)

        self.layer1_1 = self._make_layer(ResBlock, layer_list[0], planes=64, modality=1)
        self.layer1_2 = self._make_layer(ResBlock, layer_list[0], planes=64, modality=2)
        self.central_1 = FusionBlock(256, 512, dropout_prob=dropout_prob)

        self.layer2_1 = self._make_layer(
            ResBlock, layer_list[1], planes=128, stride=2, modality=1
        )
        self.layer2_2 = self._make_layer(
            ResBlock, layer_list[1], planes=128, stride=2, modality=2
        )
        self.central_2 = FusionBlock(512, 1024, dropout_prob=dropout_prob)

        self.layer3_1 = self._make_layer(
            ResBlock, layer_list[2], planes=256, stride=2, modality=1
        )
        self.layer3_2 = self._make_layer(
            ResBlock, layer_list[2], planes=256, stride=2, modality=2
        )
        self.central_3 = FusionBlock(1024, 2048, dropout_prob=dropout_prob)

        self.layer4_1 = self._make_layer(
            ResBlock, layer_list[3], planes=512, stride=2, modality=1
        )
        self.layer4_2 = self._make_layer(
            ResBlock, layer_list[3], planes=512, stride=2, modality=2
        )
        self.central_4 = FusionBlock(2048, 4096, dropout_prob=dropout_prob)

        self.avgpool_1 = nn.AdaptiveAvgPool2d((1, 1))
        self.avgpool_2 = nn.AdaptiveAvgPool2d((1, 1))
        self.avgpool_central = nn.AdaptiveAvgPool2d((1, 1))

        # self.fc = nn.Linear(1024*ResBlock.expansion, num_classes)
        self.head1 = nn.Sequential(
            nn.Linear(2048, 2048),
            nn.ReLU(inplace=True),
            nn.Linear(2048, num_classes),
        )

        self.head2 = nn.Sequential(
            nn.Linear(2048, 2048),
            nn.ReLU(inplace=True),
            nn.Linear(2048, num_classes),
        )

        self.head_central = nn.Sequential(
            nn.Linear(4096, 4096),
            nn.ReLU(inplace=True),
            nn.Linear(4096, num_classes),
        )

    def forward(self, x1, x2):
        x1 = self.relu(self.batch_norm1(self.conv1_1(x1)))
        x2 = self.relu(self.batch_norm1(self.conv1_2(x2)))

        x1 = self.max_pool(x1)
        x2 = self.max_pool(x2)

        x1 = self.layer1_1(x1)
        x2 = self.layer1_2(x2)
        x_central = self.central_1(x1, x2, None)

        x1 = self.layer2_1(x1)
        x2 = self.layer2_2(x2)
        x_central = self.central_2(x1, x2, x_central)

        x1 = self.layer3_1(x1)
        x2 = self.layer3_2(x2)
        x_central = self.central_3(x1, x2, x_central)

        x1 = self.layer4_1(x1)
        x2 = self.layer4_2(x2)
        x_central = self.central_4(x1, x2, x_central)

        x1 = self.avgpool_1(x1)
        x2 = self.avgpool_2(x2)
        x_central = self.avgpool_central(x_central)

        x1 = torch.flatten(x1, 1)
        x2 = torch.flatten(x2, 1)
        x_central = torch.flatten(x_central, 1)

        x1 = self.head1(x1)
        x2 = self.head2(x2)
        x_central = self.head_central(x_central)

        return x1, x2, x_central

    def _make_layer(self, ResBlock, blocks, planes, stride=1, modality=1):
        ii_downsample = None
        layers = []

        modality -= 1
        if stride != 1 or self.in_channels[modality] != planes * ResBlock.expansion:
            ii_downsample = nn.Sequential(
                nn.Conv2d(
                    self.in_channels[modality],
                    planes * ResBlock.expansion,
                    kernel_size=1,
                    stride=stride,
                ),
                nn.BatchNorm2d(planes * ResBlock.expansion),
            )
        layers.append(
            ResBlock(
                self.in_channels[modality],
                planes,
                i_downsample=ii_downsample,
                stride=stride,
            )
        )
        self.in_channels[modality] = planes * ResBlock.expansion

        for i in range(blocks - 1):
            layers.append(ResBlock(self.in_channels[modality], planes))

        return nn.Sequential(*layers)


def get_central_net(num_classes=6, channels_rgb=3, channels_nir=22):
    model = CentralResNet(
        Bottleneck,
        [3, 4, 6, 3],
        num_classes,
        channels_rgb,
        channels_nir,
        dropout_prob=0.4,
    )
    return model


if __name__ == "__main__":
    get_central_net()
